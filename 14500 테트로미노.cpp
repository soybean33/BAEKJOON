#include <iostream>
#include <cstring>
#include <algorithm>

int N, M;   // N: 세로 크기, M: 가로 크기
int SCORE[520][520];    // SCORE[i][j]: i행 j열에서 얻을 수 있는 점수
int ans = -21e8;    // ans: 하나의 테트로미노를 사용하여 얻을 수 있는 가장 높은 점수
int arr[19][4][4]={ // arr: 5가지 모양에 대한 대칭, 회전하여 생기는 모양은 총 15가지
    {
        {1, 1, 1, 1},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0}
    },
    {
        {1, 1, 0, 0},
        {1, 1, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 1, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {0, 0, 1, 0},
        {1, 1, 1, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 0, 0}

    },
    {
        {1, 1, 1, 0},
        {1, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 1, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 1, 1, 0},
        {0, 0, 1, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 1, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 0, 0, 0},
        {1, 1, 1, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 0, 0, 0},
        {1, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {0, 1, 1, 0},
        {1, 1, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {0, 1, 0, 0},
        {1, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 1, 0, 0},
        {0, 1, 1, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 1, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {1, 0, 0, 0},
        {1, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {0, 1, 0, 0},
        {1, 1, 1, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0}
    },
    {
        {0, 1, 0, 0},
        {1, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 0, 0}
    }
};

bool validChk(int t, int j, int i){ // t 모양 테트로미노를 j형 i열에 두었을 때 가능여부 판단
    for(int l=0; l<4; l++){
        for(int k=0; k<4; k++){
            if(arr[t][l][k] == 1 && SCORE[j+l][i+k] == -1)  // arr 이 1인데 (즉 테트로미노의 부분인데) SCORE가 -1 이면 (즉 범위를 벗어나면) return false
                return false;
        }
    }

    return true;
}

void func(){

    for(int t=0; t<19; t++){    // 19가지 모양에 대하여 모든 j행 i열에 대하여 시도
        for(int j=0; j<N; j++){
            for(int i=0; i<M; i++){
                int score = 0;  // score: t 모양으로 j행 i열에서 얻을 수 있는 점수
                if(validChk(t, j, i) == false) continue;    // 범위를 벗어나는 모양이면 continue;

                for(int l=0; l<4; l++){ // 점수 계산
                    for(int k=0; k<4; k++){
                        if(arr[t][l][k] == 0) continue; // 테트로미노가 없는 부분은 continue;
                        score += SCORE[j+l][i+k];   // 점수 합산
                    }
                }
                ans = std::max(ans, score); // 최대값 갱신
            }
        }
    }
    
    return;
}

void sol(){
    func();
    return;
}

void input(){
    std::cin >> N >> M;
    for(int j=0; j<N; j++){
        for(int i=0; i<M; i++){
            std::cin >> SCORE[j][i];
        }
    }

    return;
}

void reset(){
    memset(SCORE, -1, sizeof(SCORE));   // 범위를 벗어나는 부분은 -1로 처리하기 위한 초기화
}

int main(){
    reset();
    input();
    sol();
    std::cout << ans;
    return 0;
}